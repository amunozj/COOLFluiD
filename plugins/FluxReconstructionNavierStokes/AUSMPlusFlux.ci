#include "Framework/EquationSetData.hh"

#include "FluxReconstructionNavierStokes/FluxReconstructionNavierStokes.hh"
#include "FluxReconstructionNavierStokes/AUSMPlusFlux.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {
  
    namespace FluxReconstructionMethod {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
AUSMPlusFlux<UPDATEVAR>::AUSMPlusFlux(const std::string& name) :
  AUSMFlux<UPDATEVAR>(name)
{
  m_beta = 1./8.;
  
  m_alpha = 3./16.;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
AUSMPlusFlux<UPDATEVAR>::~AUSMPlusFlux()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMPlusFlux<UPDATEVAR>::computeMassFlux()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  this->computeInterfaceSoundSpeed(); // m_a12

  // calculation of the Mach number for the left and the right states
  this->m_mL = this->m_unL/this->m_a12;
  this->m_mR = this->m_unR/this->m_a12;
  const CFreal mL = this->m_mL;
  const CFreal mR = this->m_mR;

  const CFreal M4Plus = (std::abs(mL) >= 1.0) ? this->mach1Plus(mL) :
    this->mach2Plus(mL) + m_beta*pow(mL*mL - 1.0, 2.);

  const CFreal M4Minus = (std::abs(mR) >= 1.0) ? this->mach1Min(mR) :
    this->mach2Min(mR) - m_beta*pow(mR*mR - 1.0, 2.);

  const CFreal rhoL = (this->m_pData[LEFT])[UPDATEVAR::PTERM::RHO];
  const CFreal rhoR = (this->m_pData[RIGHT])[UPDATEVAR::PTERM::RHO]; 
  
  // calculation of the Mach number at the interface
  const CFreal m12 = M4Plus + M4Minus;
  // calculation of the mass flux at the interface
  this->m_mflux12 = (m12 > 0.0) ? this->m_a12 * m12 * rhoL : this->m_a12 * m12 * rhoR;
  
  CFLog(DEBUG_MAX, "AUSMPlusFlux<UPDATEVAR>::computePressureFlux() => m_mflux12 = " << this->m_mflux12 << "\n");
}
    
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMPlusFlux<UPDATEVAR>::computePressureFlux()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::MathTools;

  // here in AIAA 2003-4116 there is only "m_fa"
  const CFreal mL = this->m_mL;
  const CFreal mR = this->m_mR;
  const CFreal P5Plus = (std::abs(mL) >= 1.0) ? 0.5*(1+ MathFunctions::sign(mL)) : 
    this->mach2Plus(mL)*(2.0-mL) + m_alpha*mL*pow(mL*mL-1., 2.0);

  const CFreal P5Minus = (std::abs(mR) >= 1.0) ? 0.5*(1- MathFunctions::sign(mR)) : 
    -this->mach2Min(mR)*(2.0+mR) - m_alpha*mR*pow(mR*mR-1., 2.0);

  const CFreal pL = (this->m_pData[LEFT])[UPDATEVAR::PTERM::P];
  const CFreal pR = (this->m_pData[RIGHT])[UPDATEVAR::PTERM::P];
  // calculation of the pressure flux at the interface
  this->m_p12 = P5Plus*pL + P5Minus*pR;
  
  CFLog(DEBUG_MAX, "AUSMPlusFlux<UPDATEVAR>::computePressureFlux() => m_p12 = " << this->m_p12 << "\n");
}

//////////////////////////////////////////////////////////////////////////////

  } // namespace FluxReconstructionMethod

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
